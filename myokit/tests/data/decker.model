/*
This file was generated by Myokit.

author: Michael Clerx
desc: Myokit implementation of Decker 2009 (aka HRd2009)

Based on the matlab code found at http://rudylab.wustl.edu
This code is known to differ slightly from the version given in the
accompanying paper in its formulation of the Ca_JSR concentration.

Typical pacing: 0.5ms at -80

References
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[1] Properties and Ionic Mechanisms of Action Potential Adaptation,
Restitution and Accomodation in Canine Epicardium.
Decker, Heijman, Silva, Hund, Rudy
2009, Am J Physiol Heart Circ Physiol
doi:10.1152/ajpheart.01216.2008
This paper comes with an online data supplement

Original copyright notice:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Copyright (C) 2008 by Keith F. Decker, Jordi Heijman, Thomas J. Hund
    Jonathan R. Silva and Yoram Rudy
Email: rudy@wustl.edu
Web:   http://rudylab.wustl.edu

Port of the matlab code of the model described in the article
"Properties and Ionic Mechanisms of Action Potential Adaptation,
Restitution and Accomodation in Canine Epicardium"

Am. J. Physiol. / Heart Circ. Physiol.
Available online (January 23, 2009).
doi:10.1152/ajpheart.01216.2008
name: Decker2009

*/

V; .nodal(); .external(Vm);
Iion; .nodal(); .external();

V_init = -8.74724138286381958e+01;
uCa_i_init =  1.34086914801800003e-02;
uCa_sr_init =  2.41481583648899996e-02;
uCa_cal_init =  2.51028301280699986e-02;
uCa_jsr_init =  6.99469048060167964e+00;
Ca_nsr_init =  1.15993975114182191e+00;
fTrap_init =  1.88613416051338495e-03;
Nai_init =  6.93557478512917758e+00;
Na_sr_init =  6.93560711393581908e+00;
K_i_init =  1.45568262323405207e+02;
Cl_i_init =  2.02684217856671012e+01;
Cl_sr_init =  2.02684217708685708e+01;
Irel_init =  1.07332283098227196e-03;
h_init =  9.91310906686715398e-01;
m_init =  1.02225281358179695e-03;
j_init =  9.97077123975452895e-01;
a_3_init =  1.02225281358179695e-03;
i_2_init =  3.59325507698357416e-01;
a_4_init =  1.77331826849911490e-05;
i_fast_2_init =  9.97972282464083760e-01;
i_slow_init =  9.87443528000000015e-01;
a_1_init =  1.23599644204102793e-08;
i_fast_1_init =  9.96035289869214413e-01;
C_init =  9.99961378248819810e-01;
O_init =  2.27419494597377003e-05;
Cs_init =  5.93647739659912369e-11;
CI_init =  1.58793812123718788e-05;
OI_init =  3.61142024320192088e-10;
CIs_init = 0.0;
OIs_init = 0.0;
C1_init =  4.76653873938052974e-01;
C2_init =  2.55177185002643692e-01;
C3_init =  5.12285218684202723e-02;
C4_init =  4.57087442166642308e-03;
C5_init =  1.52938921156368690e-04;
C6_init =  1.32828177041374701e-01;
C7_init =  5.33322849551458311e-02;
C8_init =  7.13787461338364227e-03;
C9_init =  3.18439097063753578e-04;
C10_init =  1.38806104236399094e-02;
C11_init =  3.71550016447003313e-03;
C12_init =  2.48637146545765877e-04;
C13_init =  6.44680301443103241e-04;
C14_init =  8.62825802677086236e-05;
C15_init =  1.12282352476158802e-05;
O1_init =  1.05190695948526592e-05;

// calcium
CaMK0 = 0.05;
Ca_jsr = (sqrt(b_1 * b_1 + 4.0 * c_1) - b_1) / 2.0;
b_1 = csqnBar + Km_csqn - uCa_jsr;
c_1 = uCa_jsr * Km_csqn;
diff_Ca_nsr = Iup - Ileak - Itr * v_jsr / v_nsr;
DIupBar = 0.75;
DKm_PLB = 0.00017;
ICa_tot = ICaL + ICab + IpCa - INaCa * 2.0 - INaCaSS * 2.0;
Ileak = 0.004375 * Ca_nsr / NSRBar;
Itr = (Ca_nsr - Ca_jsr) / 25.0;
Iup = (dJup + 1.0) * IupBar * Ca_i / (Ca_i + Km_up - dKmPLB);
dJup = DIupBar * zz_1;
dKmPLB = DKm_PLB * zz_1;
zz_1 = active / (Km_CaMK + active);
IupBar = 0.004375;
Km_CaM = 0.0015;
Km_CaMK = 0.15;
Km_csqn = 0.8;
Km_up = 0.00092;
NSRBar = 15.0;
active = CaMK0 * (1.0 - fTrap) / (1.0 + Km_CaM / Ca_sr) + fTrap;
calcium_alpha = 0.05;
calcium_beta = 0.00068;
csqnBar = 10.0;
diff_fTrap = calcium_alpha * active * (active - fTrap) - calcium_beta * fTrap;
diff_uCa_cal = -ICaL * AF / (v_cal * 2.0) + CaL * v_sr / v_cal;
diff_uCa_i = Ca * v_sr / v_cyt - (ICab + IpCa - 2.0 * INaCa) * AF / (v_cyt * 2.0) - (Iup - Ileak) * v_nsr / v_cyt;
diff_uCa_jsr = Itr - Irel;
diff_uCa_sr = INaCaSS * AF / v_sr + Irel * v_jsr / v_sr - (Ca + CaL);

// calciumb
BSLBar = 1.124;
BSRBar = 0.047;
BS_sum = BSRBar + BSLBar;
Ca_cal = -b_2 / 3.0 + 2.0 / 3.0 * sqrt(b_2 * b_2 - 3.0 * c_2) * cos(acos((9.0 * b_2 * c_2 - 2.0 * pow(b_2, 3.0) - 27.0 * d_1) / (2.0 * pow(b_2 * b_2 - 3.0 * c_2, 1.5))) / 3.0);
b_2 = sum2 - uCa_cal;
c_2 = pro_sum2 - Km_sum2 * uCa_cal;
d_1 = -Km_pro2 * uCa_cal;
Ca_i = -b_3 / 3.0 + 2.0 / 3.0 * sqrt(b_3 * b_3 - 3.0 * c_3) * cos(acos((9.0 * b_3 * c_3 - 2.0 * pow(b_3, 3.0) - 27.0 * d_2) / (2.0 * pow(b_3 * b_3 - 3.0 * c_3, 1.5))) / 3.0);
Km_cmdn = 0.00238;
Km_pro = Km_cmdn * Km_trpn;
Km_sum = Km_trpn + Km_cmdn;
Km_trpn = 0.0005;
b_3 = sum - uCa_i;
c_3 = pro - uCa_i * Km_sum;
cmdnBar = 0.05;
d_2 = -Km_pro * uCa_i;
pro = Km_pro + trpnBar * Km_cmdn + cmdnBar * Km_trpn;
sum = cmdnBar + trpnBar + Km_trpn + Km_cmdn;
trpnBar = 0.07;
Ca_sr = -b_4 / 3.0 + 2.0 / 3.0 * sqrt(b_4 * b_4 - 3.0 * c_4) * cos(acos((9.0 * b_4 * c_4 - 2.0 * pow(b_4, 3.0) - 27.0 * d_3) / (2.0 * pow(b_4 * b_4 - 3.0 * c_4, 1.5))) / 3.0);
b_4 = sum2 - uCa_sr;
c_4 = pro_sum2 - Km_sum2 * uCa_sr;
d_3 = -Km_pro2 * uCa_sr;
Km_BSL = 0.0087;
Km_BSR = 0.00087;
Km_pro2 = Km_BSR * Km_BSL;
Km_sum2 = Km_BSR + Km_BSL;
pro_sum2 = Km_pro2 + BSRBar * Km_BSL + BSLBar * Km_BSR;
sum2 = BS_sum + Km_sum2;

// cell
A = 2.0 * geoArea;
AF = A / F;
geoArea = 3.14 * 2.0 * radius * radius + 2.0 * 3.14159265358979312e+00 * radius * length;
length = 0.01;
radius = 0.0011;
v_cal = volume * 0.002;
v_cyt = volume * 0.678;
v_jsr = volume * 0.0048;
v_nsr = volume * 0.0552;
v_sr = volume * 0.02;
volume = 3.14 * 1000.0 * radius * radius * length;

// chloride
diff_Cl_i = r1_1 * IClB + r2_1 * Cl + CTNaCl + CTKCl;
r1_1 = AF / v_cyt;
r2_1 = v_sr / v_cyt;
diff_Cl_sr = IClCa * r1_2 - Cl;
r1_2 = AF / v_sr;
ICl_tot = IClB + IClCa;

// common
evf = exp(vf);
vf = V * FRT;
vff = vf * F;

// cot
CTKCl = KClBar * z1_1 / (z1_1 + z2_1);
z1_1 = EK - ECl;
z2_1 = 87.8251;
CTNaCl = NaClBar * z1_2 / (z1_2 + z2_2);
z1_2 = pow(ENa - ECl, 4.0);
z2_2 = 5.94941976406925395e+07;
KClBar = 1.77e-05;
NaClBar = 2.46108000000000016e-05;

// diff
Ca = (Ca_sr - Ca_i) / var_diff_tau_diff;
CaL = (Ca_sr - Ca_cal) / var_diff_tau_diff_CaL;
Cl = (Cl_sr - Cl_i) / var_diff_tau_diff;
Na = (Na_sr - Nai) / var_diff_tau_diff;
var_diff_tau_diff = 0.2;
var_diff_tau_diff_CaL = 2.0;

// extra
Cao = 1.8;
Clo = 100.0;
Ko = 5.4;
Nao = 140.0;

// icab
ICab = ((e2v_1 == 1.0) ? 1.995e-07 * 2.0 * F * (Ca_i - 0.341 * Cao) : 1.995e-07 * 4.0 * vff * (Ca_i * e2v_1 - 0.341 * Cao) / (e2v_1 - 1.0));
e2v_1 = exp(2.0 * vf);

// ical
ACT_ss = 1.0 / (1.0 + exp((p05_1 - V) / p06_1));
ACT_tau = p00_1 + p01_1 * exp(p02_1 * (V + p03_1)) / (1.0 + exp(p04_1 * (V + p03_1)));
diff_C = -(ical_alpha + delta_1 + yy) * C + ical_beta * O + theta * Cs + xx * CI;
diff_CI = -(ical_alpha + delta_I + xx) * CI + yy * C + theta_I * CIs + ical_beta * OI;
diff_CIs = -(ical_alpha + theta_I + xs) * CIs + ys * Cs + delta_I * CI + ical_beta * OIs;
diff_Cs = -(ical_alpha + theta + ys) * Cs + delta_1 * C + ical_beta * Os + xs * CIs;
ICaL = ICaLBar * g_1;
ICaLBar = ((e2v_2 == 1.0) ? p21 * 4.0 * F * FRT * (gCai * Ca_cal - gCao * Cao) / (2.0 * FRT) : p21 * 4.0 * vff * (gCai * Ca_cal * e2v_2 - gCao * Cao) / (e2v_2 - 1.0));
e2v_2 = exp(2.0 * vf);
g_1 = O + Os;
gCai = 1.0;
gCao = 0.341;
I_V1 = p07_1 * (1.0 + exp((V + p08_1) / p09_1));
I_V2 = p10_1 * (1.0 + exp(-(V + p11_1) / p12_1));
I_Vss = (p15_1 + 1.0 / (1.0 + exp((V + p13_1) / p14_1))) / (1.0 + p15_1);
I_Vtau = 1.0 / (1.0 / I_V1 + 1.0 / I_V2);
Is_Ca = p16 - p17 / (1.0 + zz_2);
Is_V2 = Is_Ca * (1.0 + exp(-(V + p11_1) / p12_1));
Is_Vss = (p18 + 1.0 / (1.0 + exp((V + p13_1) / p14_1))) / (1.0 + p18);
Is_Vtau = 1.0 / (1.0 / I_V1 + 1.0 / Is_V2);
diff_O = -(ical_beta + delta_1 + yy) * O + ical_alpha * C + theta * Os + xx * OI;
diff_OI = -(ical_beta + delta_I + xx) * OI + yy * O + theta_I * OIs + ical_alpha * CI;
diff_OIs = -(ical_beta + theta_I + xs) * OIs + ys * Os + delta_I * OI + ical_alpha * CIs;
Os = 1.0 - C - CI - CIs - Cs - O - OI - OIs;
ical_alpha = ACT_ss / ACT_tau;
ical_beta = (1.0 - ACT_ss) / ACT_tau;
delta_1 = p19 / (1.0 + zz_2);
delta_I = ((numer == 0.0) ? 0.0 : numer / denom);
denom = yy * xs * theta;
numer = xx * ys * delta_1 * theta_I;
p00_1 = 0.59;
p01_1 = 0.8;
p02_1 = 0.052;
p03_1 = 13.0;
p04_1 = 0.132;
p05_1 = 13.56;
p06_1 = 9.45;
p07_1 = 24.828;
p08_1 = 49.1;
p09_1 = 10.349;
p10_1 = 30.553;
p11_1 = 0.213;
p12_1 = 10.807;
p13_1 = 17.5;
p14_1 = 3.0;
p15_1 = 0.25;
p16 = 25.0;
p17 = 17.5;
p18 = 0.0001;
p19 = 3.0;
p20 = 1e-06;
p21 = 1.55520000000000002e-04;
theta = 1.0;
theta_I = p20;
xs = Is_Vss / Is_Vtau;
xx = I_Vss / I_Vtau;
ys = (1.0 - Is_Vss) / Is_Vtau;
yy = (1.0 - I_Vss) / I_Vtau;
zz_2 = pow(0.003 / Ca_cal, 4.0);

// iclb
Gbar_1 = 0.000225;
IClB = Gbar_1 * (V - ECl);

// iclca
IClCa = Ibar_1 * i_fast_1 * KCaI;
Ibar_1 = ((evf == 1.0) ? 9e-07 * vff * Clo : 9e-07 * vff * (Cl_i - Clo * evf) / (1.0 - evf));
KCaI = 1.0 - 1.0 / (1.0 + pow(Irel, 2.0) / 0.16);
diff_i_fast_1 = (ss - i_fast_1) / 8.0;
i_fast_alpha = 0.025 / (1.0 + exp((V + 58.0) / 5.0));
i_fast_beta = 1.0 / (5.0 * (1.0 + exp((V + 19.0) / -9.0)));
ss = i_fast_alpha / (i_fast_alpha + i_fast_beta);

// ik1
GK1 = Gbar_2 * sqrt(Ko / 5.4);
Gbar_2 = 0.5;
IK1 = GK1 * K1 * dv;
K1 = ak / (ak + bk);
ak = 1.02 / (1.0 + exp(0.2385 * (dv - 59.215)));
bk = (0.49124 * exp(0.08032 * (dv + 5.476)) + exp(0.06175 * (dv - 594.31))) / (1.0 + exp(-0.5143 * (dv + 4.753)));
dv = V - EK;

// ikr
G = Gbar_3 * sqrt(Ko / 5.4);
Gbar_3 = 0.0138542;
IKr = G * a_1 * i_1 * (V - EK);
a_1_inf = 1.0 / (1.0 + exp((V + 10.085) / -4.25));
tau_a_1 = 1.0 / (0.0006 * ta - 0.0003 * tb);
ta = ((dd_1 == 0.0) ? 1.0 / 0.136 : vv_1 / dd_1);
dd_1 = -expm1(-0.136 * vv_1);
vv_1 = V - 1.7384;
tb = ((dd_2 == 0.0) ? 1.0 / 0.1522 : vv_2 / dd_2);
dd_2 = -expm1(0.1522 * vv_2);
vv_2 = V + 38.3608;
i_1 = 1.0 / (1.0 + exp((V + 10.0) / 15.4));

// iks
diff_C1 = b_5 * C2 - C1 * (4.0 * a_2);
diff_C10 = b_5 * C11 + g_2 * C7 - C10 * (2.0 * a_2 + 2.0 * d_4);
diff_C11 = 2.0 * a_2 * C10 + 2.0 * b_5 * C12 + 2.0 * g_2 * C8 + 3.0 * d_4 * C13 - C11 * (a_2 + b_5 + g_2 + 2.0 * d_4);
diff_C12 = a_2 * C11 + 3.0 * g_2 * C9 + 3.0 * d_4 * C14 - C12 * (2.0 * b_5 + 2.0 * g_2 + 2.0 * d_4);
diff_C13 = b_5 * C14 + g_2 * C11 - C13 * (a_2 + 3.0 * d_4);
diff_C14 = a_2 * C13 + 2.0 * g_2 * C12 + 4.0 * d_4 * C15 - C14 * (b_5 + g_2 + 3.0 * d_4);
diff_C15 = g_2 * C14 - C15 * (4.0 * d_4 + t) + e * O1;
diff_C2 = 4.0 * a_2 * C1 + 2.0 * b_5 * C3 + d_4 * C6 - C2 * (3.0 * a_2 + b_5 + g_2);
diff_C3 = 3.0 * a_2 * C2 + 3.0 * b_5 * C4 + d_4 * C7 - C3 * (2.0 * a_2 + 2.0 * b_5 + 2.0 * g_2);
diff_C4 = 2.0 * a_2 * C3 + 4.0 * b_5 * C5 + d_4 * C8 - C4 * (a_2 + 3.0 * b_5 + 3.0 * g_2);
diff_C5 = a_2 * C4 + d_4 * C9 - C5 * (4.0 * b_5 + 4.0 * g_2);
diff_C6 = b_5 * C7 + g_2 * C2 - C6 * (3.0 * a_2 + d_4);
diff_C7 = 3.0 * a_2 * C6 + 2.0 * b_5 * C8 + 2.0 * g_2 * C3 + 2.0 * d_4 * C10 - C7 * (2.0 * a_2 + b_5 + g_2 + d_4);
diff_C8 = 2.0 * a_2 * C7 + 3.0 * b_5 * C9 + 3.0 * g_2 * C4 + 2.0 * d_4 * C11 - C8 * (a_2 + 2.0 * b_5 + 2.0 * g_2 + d_4);
diff_C9 = a_2 * C8 + 4.0 * g_2 * C5 + 2.0 * d_4 * C12 - C9 * (3.0 * b_5 + 3.0 * g_2 + d_4);
GKs = p15_2 * (1.0 + 0.6 / (1.0 + pow(3.8e-05 / Ca_i, 1.4)));
IKs = GKs * (O1 + O2) * (V - EKs);
diff_O1 = -(e + p) * O1 + o * O2 + t * C15;
O2 = 1.0 - C1 - C2 - C3 - C4 - C5 - C6 - C7 - C8 - C9 - C10 - C11 - C12 - C13 - C14 - C15 - O1;
a_2 = p00_2 * exp(vf * p01_2);
b_5 = p02_2 * exp(vf * p03_2);
d_4 = p06_2 * exp(vf * p07_2);
e = p08_2 * exp(vf * p09_2);
g_2 = p04_2 * exp(vf * p05_2);
o = p11_2 * exp(vf * p12_2);
p = p13_2 * exp(vf * p14_2);
p00_2 = 1.48645979808599994e-02;
p01_2 = 2.98773012358800015e-02;
p02_2 = 8.39863121998299933e-02;
p03_2 = -5.54610571266399982e-02;
p04_2 = 1.46006611831600002e-02;
p05_2 = 2.44649530996450010e-01;
p06_2 = 3.11732688739999996e-03;
p07_2 = -4.26254519443760027e-01;
p08_2 = 7.73199009733099990e-02;
p09_2 = -6.47261224887100001e-02;
p10_2 = 8.95383064110199939e-02;
p11_2 = 7.94054599586400012e-01;
p12_2 = -8.01737819297699966e-02;
p13_2 = 5.86382286630140026e-01;
p14_2 = 2.82055543314960022e-01;
p15_2 = 0.0826;
t = p10_2;

// ikur
Gbar_4 = 0.00276;
IKur = Gbar_4 * K * (V - EK);
K = 1.0 / (1.0 + exp((7.488 - V) / 5.98));

// ina
Gbar_5 = 9.075;
INa = Gbar_5 * pow(m, 3.0) * h * j * (V - ENa);
alpha_h = ((V >= -40.0) ? 0.0 : 0.135 * exp((80.0 + V) / -6.8));
beta_h = ((V >= -40.0) ? 1.0 / (0.13 * (1.0 + exp((V + 10.66) / -11.1))) : 3.56 * exp(0.079 * V) + 310000.0 * exp(0.35 * V));
alpha_j = ((V >= -40.0) ? 0.0 : (-127140.0 * exp(0.2444 * V) - 6.948e-05 * exp(-0.04391 * V)) * (V + 37.78) / (1.0 + exp(0.311 * (V + 79.23))));
beta_j = ((V >= -40.0) ? 0.3 * exp(-2.535e-07 * V) / (1.0 + exp(-0.1 * (V + 32.0))) : 0.1212 * exp(-0.01052 * V) / (1.0 + exp(-0.1378 * (V + 40.14))));
alpha_m = ((dd_3 == 0.0) ? 3.2 : 0.32 * vv_3 / dd_3);
dd_3 = -expm1(-0.1 * vv_3);
vv_3 = V + 47.13;
beta_m = 0.08 * exp(-V / 11.0);

// inab
INaB = ((evf == 1.0) ? P * F * (Nai - Nao) : P * vff * (Nai * evf - Nao) / (evf - 1.0));
P = 3.2e-09;

// inaca
INaCa = num_1 / (denom1_1 * denom2_1 * (denom3_1 + denom4_1));
denom1_1 = 1.0 + pow(Km_Ca / Ca_i, 2.0);
denom2_1 = 1.0 + kSat * e2;
denom3_1 = Km_Cao * Nai3 + KmNao3 * Ca_i + KmNai3 * Cao * (1.0 + Ca_i / Km_Cai);
denom4_1 = Km_Cai * Na_o3 * (1.0 + Nai3 / KmNai3) + Nai3 * Cao + Na_o3 * Ca_i;
num_1 = 0.8 * vMax * (Nai3 * Cao * e1 - Na_o3 * Ca_i * e2);
INaCaSS = num_2 / (denom1_2 * denom2_2 * (denom3_2 + denom4_2));
denom1_2 = 1.0 + pow(Km_Ca / Ca_sr, 2.0);
denom2_2 = 1.0 + kSat * e2;
denom3_2 = Km_Cao * Na_ss3 + KmNao3 * Ca_sr + KmNai3 * Cao * (1.0 + Ca_sr / Km_Cai);
denom4_2 = Km_Cai * Na_o3 * (1.0 + Na_ss3 / KmNai3) + Na_ss3 * Cao + Na_o3 * Ca_sr;
num_2 = 0.2 * vMax * (Na_ss3 * Cao * e1 - Na_o3 * Ca_sr * e2);
KmNai3 = pow(Km_Nai, 3.0);
KmNao3 = pow(Km_Nao, 3.0);
Km_Ca = 0.000125;
Km_Cai = 0.0036;
Km_Cao = 1.3;
Km_Nai = 12.3;
Km_Nao = 87.5;
Na_o3 = pow(Nao, 3.0);
Na_ss3 = pow(Na_sr, 3.0);
Nai3 = pow(Nai, 3.0);
e1 = exp(eta * vf);
e2 = exp((eta - 1.0) * vf);
eta = 0.27;
kSat = 0.32;
vMax = 4.5;

// inak
INaK = Ibar_2 * fv * pow(Pna, 3.0) * Pk;
Pna = Nai / (Nai + K_Nai);
fv = 1.0 / (1.0 + exp(-phi));
phi = (V - VHalf) * FRT;
Ibar_2 = 1.4;
K_Ko = 1.5;
K_Nai = 2.6;
Pk = Ko / (Ko + K_Ko);
VHalf = -92.0;

// inal
Gbar_6 = 0.0065;
INaL = Gbar_6 * pow(a_3, 3.0) * i_2 * (V - ENa);
alpha_a_3 = ((dd_4 == 0.0) ? 3.2 : 0.32 * vv_4 / dd_4);
dd_4 = -expm1(-0.1 * vv_4);
vv_4 = V + 47.13;
beta_a_3 = 0.08 * exp(-V / 11.0);
diff_i_2 = (hLss - i_2) / 600.0;
hLss = 1.0 / (1.0 + exp((V + 91.0) / 6.1));

// ipca
IpCa = IpCa_bar * Ca_i / (Km_pCa + Ca_i);
IpCa_bar = 0.0575;
Km_pCa = 0.0005;

// irel
diff_Irel = -(irel_inf_var + Irel) / irel_tau;
irel_alpha = irel_beta * 0.1125;
irel_beta = 4.75 * (1.0 + delta_2);
delta_2 = 1.0 / (1.0 + pow(0.28 / active, 10.0));
irel_inf_var = ICaL * irel_alpha / (1.0 + pow(1.0 / Ca_jsr, 8.0));
irel_tau = irel_beta / (1.0 + 0.0123 / Ca_jsr);

// ito
Gbar_7 = 0.4975;
ITo = Gbar_7 * pow(a_4, 3.0) * i_fast_2 * i_slow * Rto1 * (V - EK);
Rto1 = exp(V / 550.0);
ito_a_alpha = 1.0 / (1.2089 * (1.0 + exp((V - 18.4099) / -29.3814)));
ito_a_beta = 3.5 / (1.0 + exp((V + 100.0) / 29.3814));
a_4_inf = 1.0 / (1.0 + exp((V + 9.437) / -7.133));
tau_a_4 = 1.0 / (ito_a_alpha + ito_a_beta);
ito_beta_i = 1.0 / (9.7953 * (1.0 + exp((V + 19.0) / -9.0)));
beta_i_fast_2 = ito_beta_i;
beta_i_slow = ito_beta_i;
alpha_i_fast_2 = 0.025 / (1.0 + exp((V + 58.0) / 5.0));
alpha_i_slow = 1.0 / (250.0 * (1.0 + exp((V + 60.0) / 5.0)));

// membrane
i_ion = INa_tot + IK_tot + ICa_tot + ICl_tot;
i_stim = 0.0 * stim_amplitude;
stim_amplitude = -80.0;

// nernst
ECl = -RTF * log(Clo / Cl_i);
EK = RTF * log(Ko / K_i);
EKs = RTF * log((Ko + P_NaK * Nao) / (K_i + P_NaK * Nai));
ENa = RTF * log(Nao / Nai);
P_NaK = 0.01833;

// phys
F = 96487.0;
FRT = F / R / T;
R = 8314.0;
RTF = R * T / F;
T = 310.0;

// potassium
IK_tot = IK1 + IKr + IKs + IKur + ITo - INaK * 2.0;
diff_K_i = -IK_tot * (AF / v_cyt) + CTKCl;

// sodium
INa_cyt = INa + INaL + INaB + INaK * 3.0 + INaCa * 3.0;
INa_tot = INa_cyt + INaCaSS * 3.0;
diff_Na_sr = -(3.0 * INaCaSS * r1_3 + Na);
r1_3 = AF / v_sr;
diff_Nai = -r1_4 * INa_cyt + r2_2 * Na + CTNaCl;
r1_4 = AF / v_cyt;
r2_2 = v_sr / v_cyt;

// Sum of currents
Iion = i_ion + i_stim;

// Markov model
group {
  C;
  CI;
  CIs;
  Cs;
  O;
  OI;
  OIs;
}.method(markov_be);

// Markov model
group {
  C1;
  C2;
  C3;
  C4;
  C5;
  C6;
  C7;
  C8;
  C9;
  C10;
  C11;
  C12;
  C13;
  C14;
  C15;
  O1;
}.method(markov_be);

// Solve non-HH and non-Markov states with CVODE
group {
  uCa_i;
  uCa_sr;
  uCa_cal;
  uCa_jsr;
  Ca_nsr;
  fTrap;
  Nai;
  Na_sr;
  K_i;
  Cl_i;
  Cl_sr;
  Irel;
  i_2;
  i_fast_1;
}.method(cvode);

// Trace all currents and state variables
group {
  i_ion;
  i_stim;
  V;
  uCa_i;
  uCa_sr;
  uCa_cal;
  uCa_jsr;
  Ca_nsr;
  fTrap;
  Nai;
  Na_sr;
  K_i;
  Cl_i;
  Cl_sr;
  Irel;
  h;
  m;
  j;
  a_3;
  i_2;
  a_4;
  i_fast_2;
  i_slow;
  a_1;
  i_fast_1;
  C;
  O;
  Cs;
  CI;
  OI;
  CIs;
  OIs;
  C1;
  C2;
  C3;
  C4;
  C5;
  C6;
  C7;
  C8;
  C9;
  C10;
  C11;
  C12;
  C13;
  C14;
  C15;
  O1;
}.trace();

// Parameters
group {
  CaMK0;
  DIupBar;
  DKm_PLB;
  IupBar;
  Km_CaM;
  Km_CaMK;
  Km_csqn;
  Km_up;
  NSRBar;
  calcium_alpha;
  calcium_beta;
  csqnBar;
  BSLBar;
  BSRBar;
  BS_sum;
  Km_BSL;
  Km_BSR;
  Km_pro2;
  Km_sum2;
  pro_sum2;
  sum2;
  A;
  AF;
  geoArea;
  length;
  radius;
  v_cal;
  v_cyt;
  v_jsr;
  v_nsr;
  v_sr;
  volume;
  KClBar;
  NaClBar;
  var_diff_tau_diff;
  var_diff_tau_diff_CaL;
  Cao;
  Clo;
  Ko;
  Nao;
  p00_1;
  p01_1;
  p02_1;
  p03_1;
  p04_1;
  p05_1;
  p06_1;
  p07_1;
  p08_1;
  p09_1;
  p10_1;
  p11_1;
  p12_1;
  p13_1;
  p14_1;
  p15_1;
  p16;
  p17;
  p18;
  p19;
  p20;
  p21;
  theta;
  theta_I;
  Gbar_1;
  GK1;
  Gbar_2;
  G;
  Gbar_3;
  p00_2;
  p01_2;
  p02_2;
  p03_2;
  p04_2;
  p05_2;
  p06_2;
  p07_2;
  p08_2;
  p09_2;
  p10_2;
  p11_2;
  p12_2;
  p13_2;
  p14_2;
  p15_2;
  t;
  Gbar_4;
  Gbar_5;
  P;
  KmNai3;
  KmNao3;
  Km_Ca;
  Km_Cai;
  Km_Cao;
  Km_Nai;
  Km_Nao;
  Na_o3;
  eta;
  kSat;
  vMax;
  Ibar_2;
  K_Ko;
  K_Nai;
  Pk;
  VHalf;
  Gbar_6;
  IpCa_bar;
  Km_pCa;
  Gbar_7;
  i_stim;
  stim_amplitude;
  P_NaK;
  F;
  FRT;
  R;
  RTF;
  T;
}.param();

